74a75,84
> 		//ADDED
> 		private static final double minHealth = 15.0D;
> 		private static final double maxHealth = 30.0D;
> 		private static final double minJump = 0.4D;
> 		private static final double maxJump = 1.0D;
> 		private static final double minSpeed = 0.1125D;
> 		private static final double maxSpeed = 0.3375D;
> 		private static final double mutationChance = 0.1;
> 		private double[] genes = new double[9];
> 		//\
932a943,955
> 		//ADDED
> 		public void updateStats()
> 		{
>         double health_ = (maxHealth-minHealth)* (this.genes[0]+this.genes[1]+this.genes[2]) / 3.0D + minHealth;
>         double speed_  = (maxSpeed-minSpeed)  * (this.genes[3]+this.genes[4]+this.genes[5]) / 3.0D + minSpeed;
>         double jump_   = (maxJump-minJump)    * (this.genes[6]+this.genes[7]+this.genes[8]) / 3.0D + minJump;
> 
> 				this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(health_);
>         this.getEntityAttribute(horseJumpStrength).setBaseValue(jump_);
>         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(speed_);
>      //0 = Normal, 1 = Donkey, 2 = Mule, 3 = Undead Horse, 4 = Skeleton Horse
> 		}//\
> 
1319a1343,1345
> 				//ADDED
> 				tagCompound.setTag("Genes", this.newDoubleNBTList(this.genes));
> 				//\
1352a1379,1401
> 		//ADDED
>     private double[] generateRolls(double total)
> 		{
> 			double a, b, c;
> 			boolean upper = total > 1.5;
> 			if (upper){ total = 3.0 - total; }
> 			do {
> 				a = total*this.rand.nextDouble();
> 				b = total*this.rand.nextDouble();
> 				if (a+b >= total)
> 				{
> 					a = total - a;
> 					b = total - b;
> 				}
> 				c = total - a - b;
> 			} while (a > 1.0 || b > 1.0 || c > 1.0);
> 			if (upper){
> 				return new double[] {1.0-a, 1.0-b, 1.0-c}; }
> 			else {
> 				return new double[] {a,b,c};}
> 		}
> 		//\
> 
1366a1416,1434
> 				//Gene NBT Tag list ADDED
> 				NBTTagList geneNBT = tagCompund.getTagList("Genes", 6);
> 				if (geneNBT.tagCount() != 0){
> 				  for (int i = 0; i < 9; ++i)
> 			 	  {
> 						this.genes[i] = geneNBT.getDouble(i);
> 		 			}
> 				}
> 				else //To simplify: stats are essentially calculated as 3d6=v. Generate fairly 3d6 from v for backwards compability.
> 				{
> 				  double h = 3.0*(this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getBaseValue()-minHealth)/(maxHealth-minHealth);
> 					double s = 3.0*(this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getBaseValue()-minSpeed)/(maxSpeed-minSpeed);
> 					double j = 3.0*(this.getEntityAttribute(horseJumpStrength).getBaseValue()-minJump)/(maxJump-minJump);
> 					double[] h_ = generateRolls(h);
> 					double[] s_ = generateRolls(s);
> 					double[] j_ = generateRolls(j);
> 					this.genes = new double[] {h_[0], h_[1], h_[2], s_[0], s_[1], s_[2], j_[0], j_[1], j_[2]};
> 				}
> 				//\
1520a1589,1602
> 
> 				//ADDED
> 				double[] genes2 = var2.genes;
> 
> 				double[] newGenes = new double[9];
> 				for (int i = 0; i < 9; ++i)
> 				{
> 					if (this.rand.nextDouble() < mutationChance){newGenes[i]=this.rand.nextDouble();}
> 					else if (this.rand.nextBoolean()) { newGenes[i] = this.genes[i]; }
> 					else { newGenes[i] = genes2[i]; }
> 				}
> 				var3.genes = newGenes;
> 				var3.updateStats();//\
> 				/*
1526a1609,1610
> 				*/
>         //0 = Normal, 1 = Donkey, 2 = Mule, 3 = Undead Horse, 4 = Skeleton Horse
1566a1651,1697
> 				//ADDED
> 				if (var8 == 0) //normal horse
> 				{
> 					this.genes = new double[]
> 					{ this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					};
> 				} 
> 				else if (var8 == 3 || var8 == 4) //skeleton or undead
> 				{
> 					this.genes = new double[]
> 					{ 0.0D
> 					, 0.0D
> 					, 0.0D
> 					, 0.3888889D
> 					, 0.3888889D
> 					, 0.3888889D
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					};
> 				}
> 				else //donkey or mule
> 				{
> 					this.genes = new double[]
> 					{ this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, this.rand.nextDouble()
> 					, 0.27777776453230113D //donkey speed
> 					, 0.27777776453230113D //more variation
> 					, 0.27777776453230113D //could be added
> 					, 0.16666666666666666D //jumping too
> 					, 0.16666666666666666D
> 					, 0.16666666666666666D
> 					};
> 				}
> 				this.updateStats();
> 				/*
> 				//\
> 
1593a1725
> 				*/
1642c1774,1775
< 
---
> 		
> 		/* These aren't needed anymore
1656a1790
> 		*/
